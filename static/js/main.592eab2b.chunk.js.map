{"version":3,"sources":["helpers/trioGroupGenerator.js","Trio.jsx","TrioEditor.jsx","Porter.jsx","Inputs.jsx","Output.jsx","Tool.jsx","Resources.jsx","About.jsx","App.jsx","index.jsx"],"names":["generateNextTrioGroup","input","need","max","subset","arr","pool","memo","trio","perfectGroup","localPool","forEach","num","index","indexOf","splice","length","seen","every","sol","sort","join","push","map","parseInt","filter","el","some","ell","includes","f","removeDuplicates","String","dontCares","Set","split","n","l","concat","hasSeen","saw","Trio","Fragment","className","src","alt","this","props","skillNum","i","class","classes","skills","uuid","React","Component","TrioEditor","state","focussedNode","selectedSkills","handleSkillSelected","bind","handleNodeSelected","handleAddNode","handleUpdateNode","handleDeleteNode","e","nodeNum","shiftKey","setState","settings","inputs","newSelectedSkills","updateSettings","newInputs","Row","style","Col","xs","important","decent","bad","Card","onClick","background","CardBody","Button","color","disabled","skill","width","selectedGroup","outputTrio","findIndex","anotherTrio","Porter","modalOpen","import","importText","handleImport","JSON","parse","Modal","isOpen","ModalHeader","ModalBody","Input","type","height","value","stringify","onChange","target","ModalFooter","Inputs","handleDropdownChange","handleTextChange","handleNeededChange","name","needed","parsed","slice","isNaN","maxSlots","newNeeded","id","UncontrolledCollapse","toggler","margin","paddingTop","ListGroup","ListGroupItem","UncontrolledDropdown","DropdownToggle","caret","DropdownMenu","Object","keys","c","DropdownItem","borderLeft","groupColors","jobGroup","meta","borderRight","classType","placeholder","Output","focussedGroup","handleGroupSelection","trioGroup","trioGroupNum","updateSelectedGroup","startX","window","scrollX","pageXOffset","startY","scrollY","pageYOffset","distanceX","distanceY","startTime","Date","getTime","easeInOutQuart","time","from","distance","duration","timer","setInterval","newX","newY","clearInterval","scrollTo","output","Tool","done","outputKey","addNext","newSettings","trioGenerator","amount","newOutput","next","a","b","Resources","padding","href","CardHeader","textAlign","entries","skillInfo","About","App","activeTab","Nav","tabs","NavItem","NavLink","TabContent","TabPane","tabId","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.592eab2b.chunk.js","sourcesContent":["/**\r\n * Generator function that recursively brute-forces trios together until they create a perfect trio grouping.\r\n * Small optimizations to the inputs here and there to increase efficiency.\r\n * Overall, this is very dumb. Don't do this.\r\n * \r\n * This breaks if the needed amount of skills goes into the double digits. This wouldn't be hard to fix, but whatever.\r\n * \r\n * @param input An array of all trios.\r\n * @param need A list of skills that need to be maxed.\r\n * @param max Max amount of node slots to use.\r\n */\r\nfunction* generateNextTrioGroup(input, need, max) {\r\n    input = removeDuplicates(input).map(trio => trio.map(String));\r\n    need = need.map(String);\r\n    const seen = []\r\n    // Get all the skills that were included, but not needed.\r\n    const dontCares = [...new Set(input.join().split(','))].filter(n => !need.includes(n));\r\n    // Get rid of all trios that contain only useless skills.\r\n    input = input.filter(l => !l.every(el => dontCares.includes(el)));\r\n\r\n    function* subset(arr, pool, memo) {\r\n        memo = memo || [];\r\n\r\n        for (var trio of arr) {\r\n            const perfectGroup = [...memo, trio];\r\n            let localPool = [...pool];\r\n            // Get rid of skills that are already maxed from the pool of needed skills.\r\n            trio.forEach(num => {\r\n                const index = localPool.indexOf(num);\r\n\r\n                if (~index) {\r\n                    localPool.splice(index, 1);\r\n                }\r\n            });\r\n\r\n            // A group is perfect IFF the pool of needed skills is exhausted. Make sure no duplicates ordered differently get added.\r\n            if (localPool.length === 0 && perfectGroup.length <= max && seen.every(sol => sol.sort().join(\"\") !== perfectGroup.sort().join(\"\"))) {\r\n                seen.push(perfectGroup);\r\n                yield perfectGroup.map(trio => trio.map(num => parseInt(num)));\r\n            }\r\n\r\n            // el.every(ell => localPool.concat(dontCares).includes(ell)) // This was bad.\r\n            // Get rid of all trios that start with the same skill as the current trio and make sure every skill in each trio still needs to be maxed or is a useless skill. Recurse.\r\n            yield* subset(arr.filter(el => el[0] !== trio[0] && localPool.some(ell => el.includes(ell))), localPool, perfectGroup);\r\n        }\r\n    }\r\n\r\n    // Get rid of duplicate trios.\r\n    yield* subset(removeDuplicates(input), need.concat(need));\r\n}\r\n\r\nfunction removeDuplicates(input) {\r\n    const seen = [];\r\n\r\n    return input.filter(trio => {\r\n        const hasSeen = seen.some(saw => trio.join() === saw.join());\r\n\r\n        if (!hasSeen) seen.push(trio);\r\n\r\n        return !hasSeen;\r\n    })\r\n}\r\n\r\nexport { generateNextTrioGroup };","import React from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport classes from \"./constants/classInfo.json\";\r\nimport \"./css/trio.css\";\r\n\r\nclass Trio extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"node clickable noselect\">\r\n                    <div className=\"nodeFrame\">\r\n                        <img\r\n                            src={\"./images/node-frame.png\"}\r\n                            alt=\"frame\"\r\n                        />\r\n                        <div className=\"skillImage\">\r\n                            <img\r\n                                className=\"divider\"\r\n                                src={\"./images/trio-divider.png\"}\r\n                                alt=\"divider\"\r\n                            />\r\n                            {this.props.trio.map((skillNum, i) =>\r\n                                <img\r\n                                    key={uuid()}\r\n                                    className={`skill${i}`}\r\n                                    src={`./images/skills/${this.props.class}/${classes[this.props.class].skills[skillNum]}.png`}\r\n                                    alt={classes[this.props.class].skills[skillNum]}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Trio };","import React from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Button, Col, Row, Card, CardBody } from \"reactstrap\";\r\nimport { Trio } from \"./Trio\";\r\nimport classes from \"./constants/classInfo.json\";\r\nimport \"./css/trio-editor.css\";\r\n\r\nclass TrioEditor extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            focussedNode: -1,\r\n            selectedSkills: [-1, -1, -1]\r\n        };\r\n\r\n        this.handleSkillSelected = this.handleSkillSelected.bind(this);\r\n        this.handleNodeSelected = this.handleNodeSelected.bind(this);\r\n        this.handleAddNode = this.handleAddNode.bind(this);\r\n        this.handleUpdateNode = this.handleUpdateNode.bind(this);\r\n        this.handleDeleteNode = this.handleDeleteNode.bind(this);\r\n    }\r\n\r\n    handleNodeSelected(e, nodeNum) {\r\n        if (e.shiftKey) {\r\n            this.handleDeleteNode(nodeNum);\r\n        } else if (this.state.focussedNode === nodeNum) {\r\n            this.setState({ focussedNode: -1, selectedSkills: [-1, -1, -1] });\r\n        } else {\r\n            this.setState({ focussedNode: nodeNum, selectedSkills: this.props.settings.inputs[nodeNum] });\r\n        }\r\n    }\r\n\r\n    handleSkillSelected(skillNum) {\r\n        const newSelectedSkills = [...this.state.selectedSkills];\r\n\r\n        if (newSelectedSkills.includes(skillNum)) {\r\n            newSelectedSkills[newSelectedSkills.indexOf(skillNum)] = -1;\r\n        } else {\r\n            newSelectedSkills.some((n, i) => {\r\n                if (!~n) {\r\n                    newSelectedSkills[i] = skillNum;\r\n                }\r\n\r\n                return (!~n);\r\n            });\r\n        }\r\n\r\n        this.setState({ selectedSkills: newSelectedSkills })\r\n    }\r\n\r\n    handleAddNode() {\r\n        this.props.updateSettings({ inputs: [...this.props.settings.inputs, this.state.selectedSkills] });\r\n\r\n        this.setState({ selectedSkills: [-1, -1, -1] });\r\n    }\r\n\r\n    handleUpdateNode() {\r\n        const newInputs = [...this.props.settings.inputs];\r\n\r\n        newInputs[this.state.focussedNode] = this.state.selectedSkills;\r\n\r\n        this.props.updateSettings({ inputs: newInputs });\r\n    }\r\n\r\n    handleDeleteNode(nodeNum) {\r\n        const newInputs = [...this.props.settings.inputs];\r\n\r\n        newInputs.splice(nodeNum || this.state.focussedNode, 1);\r\n\r\n        this.props.updateSettings({ inputs: newInputs });\r\n\r\n        this.setState({ focussedNode: -1, selectedSkills: [-1, -1, -1] });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Row style={{}}>\r\n                    <Col xs=\"6\" className=\"verticalDivider\">\r\n                        <div className=\"skillList\">\r\n                            {this.props.settings.class ?\r\n                                classes[this.props.settings.class].important.concat(\r\n                                    classes[this.props.settings.class].decent).concat(\r\n                                        classes[this.props.settings.class].bad).map(skillNum =>\r\n                                            <Card\r\n                                                key={uuid()}\r\n                                                className=\"cell noselect clickable\"\r\n                                                onClick={() => this.handleSkillSelected(skillNum)}\r\n                                                style={this.state.selectedSkills.indexOf(skillNum) === 0 ? { background: \"#208637\" }\r\n                                                    : this.state.selectedSkills.indexOf(skillNum) > 0 ? { background: \"#67da82\" }\r\n                                                        : null}\r\n                                            >\r\n                                                <CardBody>\r\n                                                    <img\r\n                                                        className=\"skillIcon\"\r\n                                                        src={`./images/skills/${this.props.settings.class}/${classes[this.props.settings.class].skills[skillNum]}.png`}\r\n                                                        alt={classes[this.props.settings.class].skills[skillNum]}\r\n                                                    />\r\n                                                </CardBody>\r\n                                            </Card>) : null}\r\n                        </div>\r\n                        <hr />\r\n                        <Row>\r\n                            <Col>\r\n                                <Button\r\n                                    color={!~this.state.focussedNode ? \"success\" : \"primary\"}\r\n                                    onClick={!~this.state.focussedNode ? this.handleAddNode : this.handleUpdateNode}\r\n                                    disabled={!this.state.selectedSkills.every(skill => ~skill)}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    {!~this.state.focussedNode ? \"Add node\" : \"Update node\"}\r\n                                </Button>\r\n                            </Col>\r\n                            <Col>\r\n                                <Button\r\n                                    color=\"danger\"\r\n                                    onClick={this.handleDeleteNode}\r\n                                    disabled={!~this.state.focussedNode}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    Delete node\r\n                            </Button>\r\n                            </Col>\r\n                        </Row>\r\n                        <br />\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"information\">\r\n                                    <p>Select 3 skills and click \"Add node\" to add it to the node list.</p>\r\n                                    <p>The first skill you select will be the left-most skill on the node and will be marked dark green.</p>\r\n                                    <p>You can deselect a node / skill by clicking it again.</p>\r\n                                    <p>You can update / delete nodes by selecting the node in the node list.</p>\r\n                                    <p>You can Shift + Click a node to quickly delete it from the node list.</p>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col xs=\"6\" className=\"verticalDivider\">\r\n                        <div className=\"nodes\">\r\n                            {this.props.settings.class ? this.props.settings.inputs.map((trio, i) =>\r\n                                <div\r\n                                    key={uuid()}\r\n                                    className=\"nodeWrapper\"\r\n                                    onClick={(e) => this.handleNodeSelected(e, i)}\r\n                                    // Check for trios that are in the selected group in Output and highlight them. Don't highlight duplicates. Change color if that node is also selected in the editor.\r\n                                    style={this.props.selectedGroup.some(outputTrio => outputTrio.join() === trio.join()) && this.props.settings.inputs.findIndex(anotherTrio => anotherTrio.join() === trio.join()) === i\r\n                                        ? { background: `radial-gradient(circle, rgba(0,232,255,1) 45%, ${this.state.focussedNode === i ? \"rgba(255,0,255,1)\" : \"rgba(0,232,255,1)\"} 50%, rgba(0,232,255,0) 70%)` }\r\n                                        : this.state.focussedNode === i\r\n                                            ? { background: \"radial-gradient(circle, rgba(154,0,255,1) 45%, rgba(154,0,255,1) 50%, rgba(209,0,255,0) 70%)\" }\r\n                                            : null}\r\n\r\n                                >\r\n                                    <Trio\r\n                                        class={this.props.settings.class}\r\n                                        trio={trio}\r\n                                    />\r\n                                </div>\r\n                            ) : null}\r\n                        </div>\r\n                        <hr />\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"information\">\r\n                                    <p>Once a trio group is generated, clicking one will highlight those nodes in the node list.</p>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nexport { TrioEditor };","import React from \"react\";\r\nimport { Button, Col, Row, Modal, ModalHeader, ModalBody, ModalFooter, Input } from \"reactstrap\";\r\nimport \"./css/porter.css\"\r\n\r\nclass Porter extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            modalOpen: false,\r\n            import: false,\r\n            importText: \"\"\r\n        };\r\n\r\n        this.handleImport = this.handleImport.bind(this);\r\n    }\r\n\r\n    handleImport() {\r\n        this.props.updateSettings(JSON.parse(this.state.importText));\r\n\r\n        this.setState({ modalOpen: false });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Modal isOpen={this.state.modalOpen} >\r\n                    <ModalHeader>\r\n                        {this.state.import ? \"Import\" : \"Export\"}\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        {!this.state.import ?\r\n                            <div className=\"information\">\r\n                                <p>Copy and save this data somewhere so you can import it in the future.</p>\r\n                            </div>\r\n                            : null}\r\n                        <Input\r\n                            type=\"textarea\"\r\n                            style={{ height: \"300px\" }}\r\n                            value={!this.state.import ? JSON.stringify(this.props.settings, null, 3) : this.state.importText}\r\n                            onChange={(e) => { this.setState({ importText: e.target.value }) }}\r\n                            disabled={!this.state.import}\r\n                        />\r\n                        <br />\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        {this.state.import ?\r\n                            <Col>\r\n                                <Button\r\n                                    onClick={this.handleImport}\r\n                                    style={{ width: \"100%\" }}\r\n                                >\r\n                                    {this.state.import ? \"Import\" : \"Close\"}\r\n                                </Button>\r\n                            </Col> : null\r\n                        }\r\n                        <Col>\r\n                            <Button\r\n                                onClick={() => this.setState({ modalOpen: false })}\r\n                                style={{ width: \"100%\" }}\r\n                            >\r\n                                Close\r\n                            </Button>\r\n                        </Col>\r\n                    </ModalFooter>\r\n                </Modal>\r\n                <Row>\r\n                    <Col xs=\"6\">\r\n                        <Button\r\n                            onClick={() => { this.setState({ modalOpen: true, import: true }) }}\r\n                            style={{ width: \"100%\" }}\r\n                        >\r\n                            Import settings\r\n                        </Button>\r\n                    </Col>\r\n                    <Col xs=\"6\">\r\n                        <Button\r\n                            onClick={() => { this.setState({ modalOpen: true, import: false }) }}\r\n                            style={{ width: \"100%\" }}\r\n                        >\r\n                            Export settings\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Porter };","import React from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Input, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, UncontrolledCollapse, Row, Col, ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { TrioEditor } from \"./TrioEditor\";\r\nimport { Porter } from \"./Porter\";\r\nimport classes from \"./constants/classInfo.json\";\r\nimport groupColors from \"./constants/groupColors.json\";\r\nimport \"./css/inputs.css\";\r\n\r\nclass Inputs extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.handleDropdownChange = this.handleDropdownChange.bind(this);\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n        this.handleNeededChange = this.handleNeededChange.bind(this);\r\n    }\r\n\r\n    handleDropdownChange(e) {\r\n        this.props.updateSettings({ class: e.target.name, needed: classes[e.target.name].important, inputs: [] });\r\n    }\r\n\r\n    handleTextChange(e) {\r\n        let parsed = parseInt(e.target.value.slice(0, 3));\r\n\r\n        if (isNaN(parsed)) {\r\n            parsed = \"\";\r\n        }\r\n\r\n        this.props.updateSettings({ maxSlots: parsed });\r\n    }\r\n\r\n    handleNeededChange(skillNum) {\r\n        const newNeeded = [...this.props.settings.needed];\r\n\r\n        if (newNeeded.includes(skillNum)) {\r\n            newNeeded.splice(newNeeded.indexOf(skillNum), 1);\r\n        } else {\r\n            newNeeded.push(skillNum);\r\n        }\r\n\r\n        this.props.updateSettings({ needed: newNeeded });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"label clickable\" id=\"toggler\">\r\n                    ▼ Settings ▼\r\n                </div>\r\n                <UncontrolledCollapse toggler=\"#toggler\">\r\n                    <Row style={{ margin: \"2px\", paddingTop: \"13px\" }}>\r\n                        <Col xs=\"4\">\r\n                            {this.props.settings.class ?\r\n                                <div>\r\n                                    <ListGroup className=\"container\">\r\n                                        {classes[this.props.settings.class].important.concat(\r\n                                            classes[this.props.settings.class].decent).concat(\r\n                                                classes[this.props.settings.class].bad).map(skillNum =>\r\n                                                    <ListGroupItem\r\n                                                        key={uuid()}\r\n                                                        className=\"noselect clickable\"\r\n                                                        onClick={() => this.handleNeededChange(skillNum)}\r\n                                                        style={this.props.settings.needed.includes(skillNum) ? { background: \"#0055B1\" } : null}\r\n                                                    >\r\n                                                        <img\r\n                                                            className=\"skillIcon\"\r\n                                                            src={`./images/skills/${this.props.settings.class}/${classes[this.props.settings.class].skills[skillNum]}.png`}\r\n                                                            alt={classes[this.props.settings.class].skills[skillNum]}\r\n                                                        />\r\n                                                        {\"  \" + classes[this.props.settings.class].skills[skillNum]}\r\n                                                    </ListGroupItem>)}\r\n                                    </ListGroup>\r\n                                    <hr />\r\n                                </div> : null}\r\n                            <Row>\r\n                                <Col>\r\n                                    <UncontrolledDropdown>\r\n                                        <DropdownToggle caret>\r\n                                            {this.props.settings.class || \"Select your class\"}\r\n                                        </DropdownToggle>\r\n                                        <DropdownMenu>\r\n                                            {Object.keys(classes).map(c =>\r\n                                                <DropdownItem\r\n                                                    key={uuid()}\r\n                                                    style={{\r\n                                                        borderLeft: `5px solid ${groupColors.jobGroup[classes[c].meta.jobGroup]}`,\r\n                                                        borderRight: `5px solid ${groupColors.classType[classes[c].meta.classType]}`\r\n                                                    }}\r\n                                                    name={c}\r\n                                                    onClick={this.handleDropdownChange}>\r\n                                                    {c}\r\n                                                </DropdownItem>)}\r\n                                        </DropdownMenu>\r\n                                    </UncontrolledDropdown>\r\n                                    <br />\r\n                                </Col>\r\n                                <Col>\r\n                                    <Input\r\n                                        type=\"text\"\r\n                                        placeholder={\"Max # of node slots to use\"}\r\n                                        value={this.props.settings.maxSlots}\r\n                                        onChange={this.handleTextChange}\r\n                                    />\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <div className=\"information\">\r\n                                        <p>First, select your class, then choose which skills you want and the max amount of node slots you're willing to use.</p>\r\n                                        <p>Your most important skills are at the top and will be marked by default.</p>\r\n                                        <p>You can deselect a skill by clicking it again.</p>\r\n                                        <p>I don't advise choosing too many skills of else the tool will hang when generating pairs.</p>\r\n                                        <p>This tool does not generate the most optimized grouping first, but it will push them to the top of the list if found, so keep on generating more if you think you can get a better grouping.</p>\r\n                                    </div>\r\n                                </Col>\r\n                            </Row>\r\n                            <Porter\r\n                                updateSettings={this.props.updateSettings}\r\n                                settings={this.props.settings}\r\n                            />\r\n                        </Col>\r\n                        <Col xs=\"8\">\r\n                            {this.props.settings.class ?\r\n                                <TrioEditor\r\n                                    key={this.props.settings.class} // Just used to unmount / mount TrioEditor whenever class selection changes.\r\n                                    updateSettings={this.props.updateSettings}\r\n                                    settings={this.props.settings}\r\n                                    selectedGroup={this.props.selectedGroup}\r\n                                /> : null}\r\n                        </Col>\r\n                    </Row>\r\n                </UncontrolledCollapse>\r\n                <hr />\r\n            </React.Fragment >\r\n        );\r\n    }\r\n}\r\n\r\nexport { Inputs };","import React from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { Trio } from \"./Trio\";\r\nimport \"./css/output.css\";\r\n\r\nclass Output extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            focussedGroup: -1\r\n        };\r\n\r\n        this.handleGroupSelection = this.handleGroupSelection.bind(this);\r\n    }\r\n\r\n    handleGroupSelection(trioGroup, trioGroupNum) {\r\n        if (this.state.focussedGroup === trioGroupNum) {\r\n            this.setState({ focussedGroup: -1 });\r\n            this.props.updateSelectedGroup([]);\r\n        } else {\r\n            this.setState({ focussedGroup: trioGroupNum });\r\n            this.props.updateSelectedGroup(trioGroup);\r\n\r\n            // Smooth scroll to the top.\r\n            let startX = window.scrollX || window.pageXOffset,\r\n                startY = window.scrollY || window.pageYOffset,\r\n                distanceX = 0 - startX,\r\n                distanceY = 0 - startY,\r\n                startTime = new Date().getTime();\r\n\r\n            // Easing function\r\n            let easeInOutQuart = function (time, from, distance, duration) {\r\n                if ((time /= duration / 2) < 1) return distance / 2 * time * time * time * time + from;\r\n                return -distance / 2 * ((time -= 2) * time * time * time - 2) + from;\r\n            };\r\n\r\n            let timer = window.setInterval(function () {\r\n                let time = new Date().getTime() - startTime,\r\n                    newX = easeInOutQuart(time, startX, distanceX, 500),\r\n                    newY = easeInOutQuart(time, startY, distanceY, 500);\r\n                if (time >= 500) {\r\n                    window.clearInterval(timer);\r\n                }\r\n                window.scrollTo(newX, newY);\r\n            }, 1000 / 60); // 60 fps\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div className=\"outputContainer\">\r\n                    {this.props.output.map((trioGroup, i) =>\r\n                        <div\r\n                            key={uuid()}\r\n                            className=\"clickable\"\r\n                            onClick={() => this.handleGroupSelection(trioGroup, i)}\r\n                            style={this.state.focussedGroup === i\r\n                                ? { background: \"radial-gradient(circle, rgba(0,232,255,1) 0%, rgba(0,232,255,0.5) 25%, rgba(209,0,255,0) 100%)\" }\r\n                                : null}\r\n                        >\r\n                            {trioGroup.map(trio => {\r\n                                return (\r\n                                    <Trio\r\n                                        key={uuid()}\r\n                                        class={this.props.class}\r\n                                        trio={trio}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Output };","import React from \"react\";\r\nimport { Button, Row, Col } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport { generateNextTrioGroup } from \"./helpers/trioGroupGenerator\";\r\nimport { Inputs } from \"./Inputs\";\r\nimport { Output } from \"./Output\";\r\n\r\nclass Tool extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      settings: {\r\n        class: \"\",\r\n        inputs: [],\r\n        needed: [],\r\n        maxSlots: \"\"\r\n      },\r\n      done: false,\r\n      output: [],\r\n      selectedGroup: [],\r\n      outputKey: uuid()\r\n    }\r\n\r\n    this.updateSettings = this.updateSettings.bind(this);\r\n    this.updateSelectedGroup = this.updateSelectedGroup.bind(this);\r\n    this.addNext = this.addNext.bind(this);\r\n  }\r\n\r\n  updateSettings(newSettings) {\r\n    const settings = { ...this.state.settings, ...newSettings };\r\n\r\n    this.setState({\r\n      settings,\r\n      trioGenerator: generateNextTrioGroup(settings.inputs, settings.needed, settings.maxSlots),\r\n      done: false,\r\n      output: [],\r\n      selectedGroup: [],\r\n      outputKey: uuid()\r\n    });\r\n  }\r\n\r\n  updateSelectedGroup(selectedGroup) {\r\n    this.setState({ selectedGroup });\r\n  }\r\n\r\n  addNext(amount) {\r\n    const newOutput = [...this.state.output];\r\n\r\n    while (amount) {\r\n      let next = this.state.trioGenerator.next();\r\n\r\n      if (next.done) {\r\n        this.setState({ done: next.done });\r\n        break;\r\n      }\r\n\r\n      newOutput.push(next.value);\r\n      amount--;\r\n    }\r\n\r\n    newOutput.sort((a, b) => a.length - b.length);\r\n\r\n    this.setState({ output: newOutput });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Inputs\r\n          updateSettings={this.updateSettings}\r\n          settings={this.state.settings}\r\n          selectedGroup={this.state.selectedGroup}\r\n        />\r\n        <Row style={{ margin: \"2px\" }}>\r\n          <Col>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.addNext(1)}\r\n              style={{ width: \"100%\" }}\r\n              disabled={this.state.done || !this.state.settings.inputs.length || !this.state.settings.class || !this.state.settings.maxSlots || !this.state.settings.needed}\r\n            >\r\n              {this.state.done ? \"That's all of them\" : \"Generate 1 more\"}\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.addNext(5)}\r\n              style={{ width: \"100%\" }}\r\n              disabled={this.state.done || !this.state.settings.inputs.length || !this.state.settings.class || !this.state.settings.maxSlots || !this.state.settings.needed}\r\n            >\r\n              {this.state.done ? \"That's all of them\" : \"Generate 5 more\"}\r\n            </Button>\r\n          </Col>\r\n          <Col>\r\n            <Button\r\n              color=\"primary\"\r\n              onClick={() => this.addNext(20)}\r\n              style={{ width: \"100%\" }}\r\n              disabled={this.state.done || !this.state.settings.inputs.length || !this.state.settings.class || !this.state.settings.maxSlots || !this.state.settings.needed}\r\n            >\r\n              {this.state.done ? \"That's all of them\" : \"Generate 20 more\"}\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row style={{ margin: \"2px\" }}>\r\n          <Col>\r\n            <Output\r\n              key={this.state.outputKey}\r\n              updateSelectedGroup={this.updateSelectedGroup}\r\n              class={this.state.settings.class}\r\n              output={this.state.output}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </React.Fragment >\r\n    );\r\n  }\r\n}\r\nexport { Tool };\r\n","import React from \"react\";\r\nimport { Card, CardHeader, CardBody, ListGroup, ListGroupItem, CardGroup } from \"reactstrap\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport classes from \"./constants/classInfo.json\";\r\nimport groupColors from \"./constants/groupColors.json\";\r\nimport \"./css/resources.css\";\r\n\r\nclass Resources extends React.Component {\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div style={{ padding: \"15px\" }}>\r\n                    <br />\r\n                    <p>\r\n                        The following is a list of all possible skills on a boost node for every class.\r\n                    </p>\r\n                    <p>\r\n                        Hopefully we can all take solace in the fact that we aren't Hayato mains who hold the record for the largest pool of potentially boostable skills with a whopping grand total of 23 skills.\r\n                    </p>\r\n                    <p>Information was sourced from:</p>\r\n                    <ul>\r\n                        <li><a href=\"https://www.reddit.com/r/Maplestory/comments/5nhdam/v_matrix_optimization_guide_for_all_classes/\">V Matrix Optimization Guide for All Classes</a></li>\r\n                        <li><a href=\"https://docs.google.com/document/d/1oyJSU3EUaJ4HPlG7IcGogHTc-0Iju2rw5XCXi2fIoK8/edit#\">How to Train Your Haku</a></li>\r\n                        <li>Maining multiple classes like a complete idiot</li>\r\n                        <li>Word of mouth</li>\r\n                    </ul>\r\n                    <br />\r\n                    <hr />\r\n                    <div className=\"classList\">\r\n                        <Card>\r\n                            <CardHeader>Legend</CardHeader>\r\n                            <ListGroup>\r\n                                <ListGroupItem\r\n                                    style={{ background: \"#208637\", textAlign: \"center\" }}\r\n                                >\r\n                                    Important\r\n                                </ListGroupItem>\r\n                                <ListGroupItem\r\n                                    style={{ background: \"#67da82\", textAlign: \"center\" }}\r\n                                >\r\n                                    Decent\r\n                                </ListGroupItem>\r\n                                <ListGroupItem\r\n                                    style={{ textAlign: \"center\" }}\r\n                                >\r\n                                    Bad\r\n                                </ListGroupItem>\r\n                                {Object.entries(groupColors.classType).map(([classType, color]) =>\r\n                                    <ListGroupItem\r\n                                        key={uuid()}\r\n                                        style={{ background: `linear-gradient(90deg, rgba(0,0,0,0) 0%, rgba(0,0,0,0) 50%, ${color} 100%)`, textAlign: \"center\" }}\r\n                                    >\r\n                                        {classType}\r\n                                    </ListGroupItem>\r\n                                )}\r\n                                {Object.entries(groupColors.jobGroup).map(([jobGroup, color]) =>\r\n                                    <ListGroupItem\r\n                                        key={uuid()}\r\n                                        style={{ background: `linear-gradient(90deg, ${color} 0%, rgba(0,0,0,0) 50%, rgba(0,0,0,0) 100%)`, textAlign: \"center\" }}\r\n                                    >\r\n                                        {jobGroup}\r\n                                    </ListGroupItem>\r\n                                )}\r\n                            </ListGroup>\r\n                        </Card>\r\n                        <br />\r\n                        {Object.entries(classes).map(([className, skillInfo]) =>\r\n                            <Card key={uuid()}>\r\n                                <CardHeader\r\n                                    style={{\r\n                                        background: `linear-gradient(90deg, ${groupColors.jobGroup[classes[className].meta.jobGroup]} 0%, rgba(0,0,0,0) 50%, ${groupColors.classType[classes[className].meta.classType]} 100%)`,\r\n                                    }}\r\n                                >\r\n                                    {className}\r\n                                </CardHeader>\r\n                                <ListGroup>\r\n                                    {skillInfo.skills.map((skill, skillNum) =>\r\n                                        <ListGroupItem\r\n                                            key={uuid()}\r\n                                            style={skillInfo.important.includes(skillNum) ? { background: \"#208637\" }\r\n                                                : skillInfo.decent.includes(skillNum) ? { background: \"#67da82\" }\r\n                                                    : null}\r\n                                        >\r\n                                            <img\r\n                                                src={`./images/skills/${className}/${skill}.png`}\r\n                                                style={{ width: \"32px\", height: \"32px\" }}\r\n                                                alt={skill}\r\n                                            />\r\n                                            {\"  \" + skill}\r\n                                        </ListGroupItem>\r\n                                    )}\r\n                                </ListGroup>\r\n                            </Card>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { Resources };","import React from \"react\";\r\n\r\nclass About extends React.Component {\r\n    render() {\r\n        return (\r\n            <div style={{ padding: \"15px\" }}>\r\n                <br />\r\n                <h3>What is this?</h3>\r\n                <hr />\r\n                <p>\r\n                    This is a tool for identifying perfect trio boost node pairs or groups in Maplestory.\r\n                </p>\r\n                <p>\r\n                    The V-Matrix is unlocked after completing the 5th job allowing you open nodestones for nodes\r\n                    that give new skills or nodes which boosts the damage of previously existing skills.\r\n                </p>\r\n                <br />\r\n                <h3>Why does this exist?</h3>\r\n                <hr />\r\n                <p>\r\n                    The effects from boost nodes are a significant portion of your damage, so it is important to get as much as you can from them.\r\n                </p>\r\n                <p>\r\n                    However, there are a few restrictions that make maximizing boost node gains difficult:\r\n                </p>\r\n                <ul>\r\n                    <li>Unless you're higher leveled, you are limited on node slots.</li>\r\n                    <li>Skills boosted by nodes are randomized when opening nodestones.</li>\r\n                    <li>A node can have a max level of 25, but a total boost to a skill can be stacked up to 50 (60 if you count node slot upgrades).</li>\r\n                    <li>You can only equip 1 boost node per left-most skill (i.e. A node that has skills A, B, C shares a left-most skill with a node that has skills A, D, E and therefore cannot be equipped together)</li>\r\n                </ul>\r\n                <p>We get around these restrictions by equipping multiple unique boost nodes and making sure each skill gets a total boost of 50 as a result.</p>\r\n                <p>The main challenge is finding a grouping of boost nodes that can actually accomplish this and do so efficiently.</p>\r\n                <p>That's where this tool comes in. You insert all your boost nodes, chooses which skills you need and it will identify all (given enough time) node grouping options letting you pick and choose which one to use.</p>\r\n                <br />\r\n                <h3>Contact me</h3>\r\n                <hr />\r\n                <p>\r\n                    If any information in here is wrong (which there probably are some) or something is broken (which it likely is) or if you just have a feature to suggest, you can contact me on any of the following:\r\n                </p>\r\n                <ul>\r\n                    <li>MagicBully in-game NA Reboot</li>\r\n                    <li><a href=\"mailto:magicbully@socialdistance.wtf\">magicbully@socialdistance.wtf</a></li>\r\n                    <li>Jozhus#2428 on Discord</li>\r\n                </ul>\r\n                <br />\r\n                <h3>Changelog</h3>\r\n                <hr />\r\n                <p>\r\n                    11/5/2020 - Version 1.4.3\r\n                </p>\r\n                <ul>\r\n                    <li>Fixed mistake with Kanna's listed important boost nodes.</li>\r\n                    <li>Revised Kanna's based on information from <a href=\"https://docs.google.com/document/d/1oyJSU3EUaJ4HPlG7IcGogHTc-0Iju2rw5XCXi2fIoK8/edit#\">How to Train Your Haku</a>.</li>\r\n                </ul>\r\n                <p>\r\n                    11/5/2020 - Version 1.4.2\r\n                </p>\r\n                <ul>\r\n                    <li>Revised Beast Tamer's job group.</li>\r\n                    <li>Added contact information.</li>\r\n                </ul>\r\n                <p>\r\n                    10/31/2020 - Version 1.4.1\r\n                </p>\r\n                <ul>\r\n                    <li>Changed how the job group and class colors appear on the resources page to be a little less jarring.</li>\r\n                </ul>\r\n                <p>\r\n                    10/31/2020 - Version 1.4\r\n                </p>\r\n                <ul>\r\n                    <li>Added some colors for differing class types and job groups to make it a little easier to find a specific class in a list.</li>\r\n                    <li>It might look a bit ugly, but refer the the resources tab for reference.</li>\r\n                </ul>\r\n                <p>\r\n                    10/30/2020 - Version 1.3.1\r\n                </p>\r\n                <ul>\r\n                    <li>Hero's perfect trio skills were one-off. I literally had Slash Blast as its most important skill lmao.</li>\r\n                </ul>\r\n                <p>\r\n                    10/30/2020 - Version 1.3\r\n                </p>\r\n                <ul>\r\n                    <li>Changed the skill display for creating nodes into a grid instead of a scrolling list.</li>\r\n                    <li>Deleting a node now un-highlights nodes that were in a selected group from the generated list.</li>\r\n                    <li>Added content to the resources tab so it's not empty.</li>\r\n                    <li>More CSS bullshittery.</li>\r\n                </ul>\r\n                <p>\r\n                    10/29/2020 - Version 1.2\r\n                </p>\r\n                <ul>\r\n                    <li>Fixed the algorithm because it wasn't fully working correctly.</li>\r\n                    <li>Flipped this changelog so that versions are in descending order.</li>\r\n                </ul>\r\n                <p>\r\n                    10/29/2020 - Version 1.1\r\n                </p>\r\n                <ul>\r\n                    <li>Fixed a few crashing bugs.</li>\r\n                    <li>Made skill text non-selectable.</li>\r\n                    <li>Changed mouse hover icons for certain components.</li>\r\n                    <li>Added / modified some info texts.</li>\r\n                </ul>\r\n                <p>\r\n                    10/29/2020 - Version 1.0\r\n                </p>\r\n                <ul>\r\n                    <li>Gave this brute-forcing algorithm a GUI.</li>\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { About };","import \"bootstrap/dist/css/bootstrap.css\";\r\nimport React from \"react\";\r\nimport { Nav, NavItem, NavLink, TabContent, TabPane } from \"reactstrap\";\r\nimport { Tool } from \"./Tool\";\r\nimport { Resources } from \"./Resources\";\r\nimport { About } from \"./About\";\r\nimport \"./css/app.css\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            activeTab: \"0\"\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Nav tabs>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            onClick={() => this.setState({ activeTab: \"0\" })}\r\n                        >\r\n                            Tool\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            onClick={() => this.setState({ activeTab: \"1\" })}\r\n                        >\r\n                            Resources\r\n                        </NavLink>\r\n                    </NavItem>\r\n                    <NavItem>\r\n                        <NavLink\r\n                            onClick={() => this.setState({ activeTab: \"2\" })}\r\n                        >\r\n                            About\r\n                        </NavLink>\r\n                    </NavItem>\r\n                </Nav>\r\n                <TabContent activeTab={this.state.activeTab}>\r\n                    <TabPane tabId=\"0\">\r\n                        <Tool />\r\n                    </TabPane>\r\n                    <TabPane tabId=\"1\">\r\n                        <Resources />\r\n                    </TabPane>\r\n                    <TabPane tabId=\"2\">\r\n                        <About />\r\n                    </TabPane>\r\n                </TabContent>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport { App };","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}